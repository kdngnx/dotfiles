#!/usr/bin/env bash
# vim: ft=bash
set -e

function linking() {
  ln -sfn $(pwd)/.zshrc ~/.zshrc
  ln -sfn $(pwd)/.zshenv ~/.zshenv
  ln -sfn $(pwd)/.tmux.conf ~/.tmux.conf
  ln -sfn $(pwd)/.psqlrc ~/.psqlrc
  ln -sfn $(pwd)/.vimrc ~/.vimrc
  ln -sfn $(pwd)/.ideavimrc ~/.ideavimrc
  ln -sfn $(pwd)/.ripgreprc ~/.ripgreprc

  mkdir -p ~/.local/bin
  mkdir -p ~/.vim/undo
  mkdir -p ${XDG_DATA_HOME:=~/.local/share}
  mkdir -p ${XDG_CONFIG_HOME:=~/.config}
  ln -sfn $(pwd)/alacritty $XDG_CONFIG_HOME/alacritty
  ln -sfn $(pwd)/pack ~/.vim/pack

  ln -sfn $(pwd)/.gitignore ~/.gitignore
  git config --global core.excludesFile '~/.gitignore'

  touch ~/.profile
  mkdir -p ~/personal
  mkdir -p ~/repos
}

echo '[-] linking dotfiles [-]'
linking  # link first to avoid any potential issues

if [[ "$OSTYPE" == "darwin"* ]]; then  # macos
  if ! xcode-select -p &> /dev/null; then
    echo '[-] installing xcode command line tools [-]'
    xcode-select --install
  fi

  if ! hash brew &> /dev/null; then
    echo '[-] installing homebrew [-]'
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    (echo; echo 'eval "$(/opt/homebrew/bin/brew shellenv)"') >> ~/.zprofile
    eval "$(/opt/homebrew/bin/brew shellenv)"
  fi

  echo '[-] installing essential packages [-]'
  brew update
  brew install curl wget git coreutils watch cmake ninja tree parallel ncdu
  brew install alacritty tmux fzf ripgrep jq universal-ctags font-hack
else  # linux or wsl
  echo '[-] checking secure boot state [-]'
  if [ ! -f '/etc/wsl.conf' ] && [[ "$(mokutil --sb-state)" != *"SecureBoot enabled"* ]]; then
    echo "could not determine the secure boot state."
    exit 1
  fi

  echo '[-] installing essential packages [-]'
  sudo apt-get update && sudo apt-get upgrade -y
  sudo apt-get install -y curl wget zip zsh git coreutils gcc clang clangd cmake make ninja-build parallel
  sudo apt-get install -y alacritty watch tree vim vim-gtk3 tmux fzf ripgrep jq universal-ctags ncdu wl-clipboard

  if lspci | grep -E "VGA|3D" | grep -iq "AMD"; then
    echo '[-] installing some extra packages [-]'
    ln -sfn $(pwd)/MangoHud $XDG_CONFIG_HOME/MangoHud
    sudo apt-get install -y rocm-smi mangohud
  fi

  target_dir=${XDG_DATA_HOME:=~/.local/share}/fonts
  if [ ! -d "$target_dir" ]; then
    echo '[-] installing favourite font [-]'
    wget https://github.com/source-foundry/Hack/releases/download/v3.003/Hack-v3.003-ttf.zip
    mkdir -p "$target_dir"
    unzip -j Hack-v3.003-ttf.zip 'ttf/*.ttf' -d "$target_dir"
    rm -f Hack-v3.003-ttf.zip
    fc-cache -f -v
  fi

  target_dir=${XDG_DATA_HOME:=~/.local/share}/ibus-bamboo
  if [ ! -f '/etc/wsl.conf' ] && [ ! -d "$target_dir" ]; then
    echo '[-] building ibus-bamboo [-]'
    sudo apt-get install -y ibus make golang libx11-dev libxtst-dev libgtk-3-dev
    git clone https://github.com/BambooEngine/ibus-bamboo.git "$target_dir"
    cd "$target_dir"
    sudo make install PREFIX=/usr
    env DCONF_PROFILE=ibus dconf write /desktop/ibus/general/preload-engines "['BambooUs', 'Bamboo']" && \
      gsettings set org.gnome.desktop.input-sources sources "[('xkb', 'us'), ('ibus', 'Bamboo')]"
  fi

  if [ ! -f '/etc/wsl.conf' ]; then
    echo '[-] disable dash to dock hot-keys on ubuntu [-]'
    gsettings set org.gnome.shell.extensions.dash-to-dock hot-keys false
  fi
fi

# apply for both macos and linux
echo '[-] downloading git-prompt.sh script [-]'
mkdir -p ~/.zsh/plugins/git/
curl https://raw.githubusercontent.com/git/git/master/contrib/completion/git-prompt.sh \
  -o ~/.zsh/plugins/git/git-prompt.sh

target_dir=~/.zsh/zsh-autosuggestions
if [ ! -d "$target_dir" ] ; then
  echo '[-] cloning zsh-autosuggestions [-]'
  git clone https://github.com/zsh-users/zsh-autosuggestions "$target_dir"
fi

echo '[-] updating vim plugins helptags [-]'
for dir in ~/.vim/pack/downloads/opt/*/doc; do
  [ -d "$dir" ] && vim -u NONE -c "helptags $dir" -c q
done

current_shell=$(echo $SHELL)
if [ "$current_shell" != '/usr/bin/zsh' ] && [ "$current_shell" != '/bin/zsh' ]; then
  echo '[-] change default shell to zsh [-]'
  chsh -s $(which zsh)
  echo '[-] device ready, restart your computer. [-]'
else
  echo '[-] device ready. [-]'
fi
