#!/usr/bin/env bash
set -e

function linking() {
  ln -sfn $(pwd)/.zshrc ~/.zshrc
  ln -sfn $(pwd)/.zshenv ~/.zshenv
  ln -sfn $(pwd)/.tmux.conf ~/.tmux.conf
  ln -sfn $(pwd)/.psqlrc ~/.psqlrc
  ln -sfn $(pwd)/.vimrc ~/.vimrc
  ln -sfn $(pwd)/.ideavimrc ~/.ideavimrc

  mkdir -p ${XDG_DATA_HOME:=~/.local/share}
  mkdir -p ${XDG_CONFIG_HOME:=~/.config}
  ln -sfn $(pwd)/alacritty $XDG_CONFIG_HOME/alacritty
  ln -sfn $(pwd)/nvim $XDG_CONFIG_HOME/nvim

  ln -sfn $(pwd)/.gitignore ~/.gitignore
  git config --global core.excludesFile '~/.gitignore'

  mkdir -p ~/.local/bin
  mkdir -p ~/personal
  mkdir -p ~/repos
  touch ~/.profile
}
echo '[-] linking dotfiles [-]'
linking

if [[ "$OSTYPE" == "darwin"* ]]; then
  if ! xcode-select -p &> /dev/null; then
    echo '[-] installing xcode command line tools [-]'
    xcode-select --install
  fi

  if ! hash brew &> /dev/null; then
    echo '[-] installing homebrew [-]'
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    (echo; echo 'eval "$(/opt/homebrew/bin/brew shellenv)"') >> ~/.zprofile
    eval "$(/opt/homebrew/bin/brew shellenv)"
  fi

  echo '[-] installing essential packages [-]'
  brew update
  brew install curl wget git coreutils watch cmake ninja tree parallel tmux ripgrep jq
  brew install google-chrome alacritty orbstack maccy ncdu tldr universal-ctags font-hack
else
  echo '[-] checking secure boot state [-]'
  if [[ "$(mokutil --sb-state)" != *"SecureBoot enabled"* ]]; then
    echo "could not determine the secure boot state."
    exit 1
  fi

  if [ ! -f '/etc/apt/sources.list.d/debian.sources' ]; then
    echo '[-] configuring debian sources [-]'
    sudo cp -f $(pwd)/etc/apt/sources.list.d/debian.sources /etc/apt/sources.list.d/debian.sources
    sudo apt-get update && sudo apt-get upgrade -y
  fi

  echo '[-] installing essential packages [-]'
  sudo apt-get install -y curl wget zip zsh git coreutils gcc clang cmake make ninja-build ncdu
  sudo apt-get install -y alacritty parallel watch tree vim tmux ripgrep jq universal-ctags wl-clipboard

  if lspci | grep -E "VGA|3D" | grep -iq "AMD"; then
    echo '[-] installing amd essential packages [-]'
    sudo apt-get install -y rocm-smi gamemode flatpak gnome-software-plugin-flatpak
    flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo
    flatpak install -y --noninteractive flathub com.github.tchx84.Flatseal
    echo 'be sure to cp mangohud config to `.config/MangoHud` directory inside steam flatpak'
  fi

  if [ ! -f '/etc/apt/sources.list.d/mozilla.list' ]; then
    echo '[-] installing latest firefox [-]'
    sudo apt-get purge --autoremove -y firefox-esr
    sudo apt-get autoremove -y
    sudo install -d -m 0755 /etc/apt/keyrings
    wget -q https://packages.mozilla.org/apt/repo-signing-key.gpg -O- | sudo tee /etc/apt/keyrings/packages.mozilla.org.asc > /dev/null
    gpg -n -q --import --import-options import-show /etc/apt/keyrings/packages.mozilla.org.asc | awk '/pub/{getline; gsub(/^ +| +$/,""); if($0 == "35BAA0B33E9EB396F59CA838C0BA5CE6DC6315A3") print "\nThe key fingerprint matches ("$0").\n"; else print "\nVerification failed: the fingerprint ("$0") does not match the expected one.\n"}'
    echo "deb [signed-by=/etc/apt/keyrings/packages.mozilla.org.asc] https://packages.mozilla.org/apt mozilla main" | sudo tee -a /etc/apt/sources.list.d/mozilla.list > /dev/null
    echo '
    Package: *
    Pin: origin packages.mozilla.org
    Pin-Priority: 1000
    ' | sudo tee /etc/apt/preferences.d/mozilla
    sudo apt-get update -y && sudo apt-get install -y firefox
  fi

  target_dir=$XDG_DATA_HOME/fonts
  if [ ! -d "$target_dir" ] ; then
    echo '[-] installing favourite font [-]'
    wget https://github.com/source-foundry/Hack/releases/download/v3.003/Hack-v3.003-ttf.zip
    mkdir -p "$target_dir"
    unzip -j Hack-v3.003-ttf.zip 'ttf/*.ttf' -d "$target_dir"
    rm -f Hack-v3.003-ttf.zip
    fc-cache -f -v
  fi

  target_dir=$XDG_DATA_HOME/ibus-bamboo
  if [ ! -d "$target_dir" ] ; then
    echo '[-] building ibus-bamboo [-]'
    sudo apt-get install -y ibus make golang libx11-dev libxtst-dev libgtk-3-dev
    git clone https://github.com/BambooEngine/ibus-bamboo.git $target_dir
    cd $target_dir
    sudo make install PREFIX=/usr
    env DCONF_PROFILE=ibus dconf write /desktop/ibus/general/preload-engines "['BambooUs', 'Bamboo']" && \
      gsettings set org.gnome.desktop.input-sources sources "[('xkb', 'us'), ('ibus', 'Bamboo')]"
  fi
fi

echo '[-] downloading git-prompt.sh script [-]'
mkdir -p ~/.zsh/plugins/git/
curl https://raw.githubusercontent.com/git/git/master/contrib/completion/git-prompt.sh \
  -o ~/.zsh/plugins/git/git-prompt.sh

target_dir=~/.zsh/zsh-autosuggestions
if [ ! -d "$target_dir" ] ; then
  echo '[-] cloning zsh-autosuggestions [-]'
  git clone https://github.com/zsh-users/zsh-autosuggestions "$target_dir"
fi

target_dir=$XDG_DATA_HOME/neovim
if [ ! -d "$target_dir" ] ; then
  echo '[-] building neovim [-]'
  git clone https://github.com/neovim/neovim.git "$target_dir"
  cd "$target_dir"
  git checkout nightly
  make CMAKE_BUILD_TYPE=RelWithDebInfo
  sudo make install
fi

current_shell=$(echo $SHELL)
if [ "$current_shell" != '/usr/bin/zsh' ] && [ "$current_shell" != '/bin/zsh' ]; then
  echo '[-] change default shell to zsh [-]'
  chsh -s $(which zsh)
  echo '[-] device ready, restart your computer. [-]'
else
  echo '[-] device ready. [-]'
fi
# vim: ft=bash
